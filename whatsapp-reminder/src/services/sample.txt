require("dotenv").config();
const axios = require("axios");
const { saveBooking } = require("../helpers/databaseHelpers");
const Department = require("../models/Appointment/department");
const Doctor = require("../models/Appointment/doctor");
const { savePatientDetails } = require("../services/patientService");
const { saveUserDetails } = require("../services/userService");

const WHATSAPP_API_URL = `https://graph.facebook.com/v21.0/${process.env.PHONE_NUMBER_ID}/messages`;
const WHATSAPP_ACCESS_TOKEN = process.env.ACCESS_TOKEN;

function getUserDetails(body) {
  const userContact = body?.entry?.[0]?.changes?.[0]?.value?.contacts?.[0];
  const userName = userContact?.profile?.name || "there"; // Default if name is missing
  const userWaId = userContact?.wa_id || "";

  return { userName, userWaId };
}

exports.processMessage = async (body) => {
  const { userName, userWaId } = getUserDetails(body);

  const messageEvent = body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];

  if (messageEvent?.interactive?.type === "nfm_reply") {
    return await handleFormSubmission(messageEvent, body);
  }

  if (messageEvent?.text?.body.trim().toLowerCase() === "h@@!") {
    // ‚úÖ Save user details to the database
    await saveUserDetails({ waId: userWaId, name: userName });
    await sendAppointmentReplyButton(messageEvent.from, userName);
  }

  if (messageEvent?.text?.body.trim().toLowerCase() === "hello") {
    await sendOffersReplyButton(messageEvent.from);
    
  }
   // "Not Interested" Button
   if (messageEvent?.interactive?.button_reply?.id === "not_interested") {
    await sendTextMessage(messageEvent.from, "Okay. We'll come up with new offers soon!");
  }

  // See Offers Button
  if (messageEvent?.interactive?.button_reply?.id === "see_offers") {
    await sendOfferCategories(messageEvent.from);
  }

  // Category Buttons
  if (messageEvent?.interactive?.button_reply?.id === "category_electronics") {
    await sendElectronicsList(messageEvent.from);
  }

  if (messageEvent?.interactive?.button_reply?.id === "category_appliances") {
    await sendAppliancesList(messageEvent.from);
  }

  if (messageEvent?.interactive?.button_reply?.id === "category_clothing") {
    await sendClothingList(messageEvent.from);
  }

  // Product Selection (Final Confirmation)
  if (messageEvent?.interactive?.list_reply?.id) {
    const selectedItem = messageEvent.interactive.list_reply.title || "your selected item";
    await sendTextMessage(
      messageEvent.from,
      `üì¶ Item Booked for ${selectedItem}. We will contact you soon!`
    );
  }

  if (messageEvent?.interactive?.type === "navigate") {
    console.log("üîÑ Ignoring navigation event...");
  }

  // Check if the user clicks "Book An Appointment"
  if (messageEvent?.interactive?.button_reply?.id === "book-appointment") {
    await sendAppointmentFlow(messageEvent.from);
  }
};

const handleFormSubmission = async (messageEvent, body) => {
  console.log("üì• Form Submission Detected!");

  const userContact = body.entry?.[0]?.changes?.[0]?.value?.contacts?.[0];
  const userName = userContact?.profile?.name || "Unknown";
  const userWaId = userContact?.wa_id || "Unknown";

  let formData;
  try {
    formData = JSON.parse(messageEvent.interactive.nfm_reply.response_json);
  } catch (error) {
    console.error("‚ùå Error parsing form data:", error);
    return;
  }

  // Extract appointment and patient details
  const { doctor, department, calendar } = formData.appointment_details || {};
  const patientDetails = formData.patient_details;

  if (!doctor || !department || !calendar) {
    console.log("‚ùå Missing form fields!");
    return;
  }

  // ‚úÖ Save patient details
  const patient = await savePatientDetails(patientDetails);
  if (!patient) {
    console.error("‚ùå Failed to save patient details.");
    return;
  }

  // Step 2: Save booking details with patient ID
  const bookingResult = await saveBooking({
    doctorId: doctor,
    departmentId: department,
    bookingDate: calendar,
    patientId: patient.id, // Link booking to patient
  });

  const doctorDetails = await Doctor.findByPk(doctor, { attributes: ["name"] });
  const departmentDetails = await Department.findByPk(department, {
    attributes: ["name"],
  });

  const doctorName = doctorDetails?.name || "Unknown Doctor";
  const departmentName = departmentDetails?.name || "Unknown Department";

  const confirmationMessage = bookingResult.success
    ? `Hello *${userName}*! Your appointment with *${doctorName}* (Department: *${departmentName}*) is scheduled for *${calendar}* at 10:00 AM.`
    : "‚ùå Failed to save booking. Please try again.";

  await sendWhatsAppMessage(userWaId, confirmationMessage);
};

// ‚úÖ Function to Send a WhatsApp Message
const sendWhatsAppMessage = async (phoneNumber, message) => {
  try {
    const payload = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to: phoneNumber,
      type: "text",
      text: { body: message },
    };

    const response = await axios.post(WHATSAPP_API_URL, payload, {
      headers: {
        Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });

    console.log("‚úÖ WhatsApp Message Sent:", response.data);
  } catch (error) {
    console.error(
      "‚ùå Error sending WhatsApp message:",
      error.response?.data || error.message
    );
  }
};

// ‚úÖ Function to Send Appointment Flow
const sendAppointmentFlow = async (phoneNumber) => {
  try {
    // Ensure required environment variables exist
    if (
      !WHATSAPP_ACCESS_TOKEN ||
      !"1611706266896358" ||
      !"FLOW_BOOKING_TOKEN"
    ) {
      throw new Error("‚ùå Missing required environment variables.");
    }

    // Fetch departments and doctors from the database
    const departments = await Department.findAll({
      attributes: ["id", "name"],
    });
    const doctors = await Doctor.findAll({ attributes: ["id", "name"] });
    const todayDate = new Date().toISOString().split("T")[0];

    const payload = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to: phoneNumber,
      type: "interactive",
      interactive: {
        type: "flow",
        body: {
          text: "Welcome to our appointment booking service!",
        },
        footer: {
          text: "We are here to help you schedule your appointment.",
        },
        action: {
          name: "flow",
          parameters: {
            flow_message_version: "3",
            flow_token: "FLOW_BOOKING_TOKEN",
            flow_id: "1611706266896358",
            flow_cta: "Book An Appointment",
            flow_action: "navigate",
            flow_action_payload: {
              screen: "APPOINTMENT",
              data: {
                is_doctor_enabled: false,
                department_list: departments.map((dept) => ({
                  id: `${dept.id}`,
                  title: dept.name,
                })),
                doctor_list: [],
                min_date: todayDate,
              },
            },
          },
        },
      },
    };

    // Send message to WhatsApp API
    const response = await axios.post(WHATSAPP_API_URL, payload, {
      headers: {
        Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });

    console.log("‚úÖ WhatsApp Flow Message Sent:", response.data);
  } catch (error) {
    console.error(
      "‚ùå Error sending flow message:",
      error.response?.data || error.message
    );
  }
};

async function sendAppointmentReplyButton(phoneNumber, userName) {
  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: phoneNumber,
    type: "interactive",
    interactive: {
      type: "button",
      body: {
        text: `Hello *${userName}*! üòÉ\nHow can we assist you with your appointment today? Select an option below to schedule, make changes, or explore our services.`,
      },
      action: {
        buttons: [
          {
            type: "reply",
            reply: {
              id: "book-appointment",
              title: "üìÖ Book Appointment",
            },
          },
          {
            type: "reply",
            reply: {
              id: "cancel-appointment",
              title: "‚ùå Cancel Appointment",
            },
          },
          {
            type: "reply",
            reply: {
              id: "more-options",
              title: "‚ÑπÔ∏è More Options",
            },
          },
        ],
      },
    },
  };

  try {
    const response = await axios.post(WHATSAPP_API_URL, data, {
      headers: {
        Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });
    console.log("‚úÖ Message sent:", response.data);
  } catch (error) {
    console.error(
      "‚ùå Error sending message:",
      error.response?.data || error.message
    );
  }
}
async function sendOffersReplyButton(phoneNumber) {
  const offerMessage = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: phoneNumber,
    type: "interactive",
    interactive: {
      type: "button",
      body: {
        text: "üéâ New offers are available just for you! Would you like to check them out?",
      },
      action: {
        buttons: [
          {
            type: "reply",
            reply: {
              id: "see_offers",
              title: "üîç See Offers",
            },
          },
          {
            type: "reply",
            reply: {
              id: "not_interested",
              title: "üö´ Not Interested",
            },
          },
        ],
      },
    },
  };

  try {
    const response = await axios.post(WHATSAPP_API_URL, offerMessage, {
      headers: {
        Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });
    console.log("‚úÖ Offer message sent:", response.data);
  } catch (error) {
    console.error(
      "‚ùå Error sending offer message:",
      error.response?.data || error.message
    );
  }
}
async function sendTextMessage(phoneNumber, text) {
  const message = {
    messaging_product: "whatsapp",
    to: phoneNumber,
    type: "text",
    text: { body: text },
  };

  await axios.post(WHATSAPP_API_URL, message, {
    headers: {
      Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    },
  });
}

// Send Offer Categories
async function sendOfferCategories(phoneNumber) {
  const message = {
    messaging_product: "whatsapp",
    to: phoneNumber,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: "üì¢ Here are our offer categories:" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "category_electronics", title: "üì± Electronics" } },
          { type: "reply", reply: { id: "category_appliances", title: "üè† Home Appliances" } },
          { type: "reply", reply: { id: "category_clothing", title: "üëó Clothing" } },
        ],
      },
    },
  };

  await axios.post(WHATSAPP_API_URL, message, {
    headers: {
      Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    },
  });
}

// Electronics List
async function sendElectronicsList(phoneNumber) {
  const message = {
    messaging_product: "whatsapp",
    to: phoneNumber,
    type: "interactive",
    interactive: {
      type: "list",
      header: { type: "text", text: "Electronics Offers" },
      body: { text: "Choose a product to order:" },
      action: {
        button: "View Products",
        sections: [
          {
            title: "Mobiles",
            rows: [
              { id: "model_iphone", title: "üì± iPhone 15" }
            ]
          },
          {
            title: "Laptops",
            rows: [
              { id: "model_macbook", title: "üíª MacBook Air M2" }
            ]
          }
        ]
      }
    }
  };

  await axios.post(WHATSAPP_API_URL, message, {
    headers: {
      Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    }
  });
}

// Mobile Models
async function sendAppliancesList(phoneNumber) {
  const message = {
    messaging_product: "whatsapp",
    to: phoneNumber,
    type: "interactive",
    interactive: {
      type: "list",
      header: { type: "text", text: "Home Appliances" },
      body: { text: "Choose an appliance to order:" },
      action: {
        button: "View Appliances",
        sections: [
          {
            title: "Washing Machines",
            rows: [
              { id: "model_lg_wash", title: "üß∫ LG Front Load" }
            ]
          },
          {
            title: "Refrigerators",
            rows: [
              { id: "model_lg_fridge", title: "üßä LG Double Door" }
            ]
          }
        ]
      }
    }
  };

  await axios.post(WHATSAPP_API_URL, message, {
    headers: {
      Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    }
  });
}

async function sendClothingList(phoneNumber) {
  const message = {
    messaging_product: "whatsapp",
    to: phoneNumber,
    type: "interactive",
    interactive: {
      type: "list",
      header: { type: "text", text: "Clothing Offers" },
      body: { text: "Choose an item to order:" },
      action: {
        button: "View Clothing",
        sections: [
          {
            title: "Men",
            rows: [
              { id: "model_men_tshirt", title: "üëï T-Shirt" }
            ]
          },
          {
            title: "Women",
            rows: [
              { id: "model_women_dress", title: "üëó Evening Dress" }
            ]
          }
        ]
      }
    }
  };

  await axios.post(WHATSAPP_API_URL, message, {
    headers: {
      Authorization: `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    }
  });
}
